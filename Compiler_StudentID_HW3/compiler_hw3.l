/* Definition section */
%{
#include <stdbool.h>
#include "y.tab.h"	/* header file generated by bison */
#define BUF_SIZE 1000

extern YYSTYPE yylval; //YYSTYPE
extern void dump_symbol(int tar_scope, bool print);
char buf[BUF_SIZE];
bool printRCB = false;
bool forwardDeclarationLine = false;
int errorStatus = 0; //0:Pass, 1: redeclare, 2: undeclare
bool isFunction = false;
bool isArg = false;
bool dumpTheTableRightHereAccordingToTheHomeworkRequirement = false;
int tableScope;
char errID[256];
void semError(short type);

/* This macro is used to record code line */
#define CONCAT { strncat(buf, yytext, BUF_SIZE - strlen(buf) - 1); }
%}

/* Define regular expression label */
digit		[0-9]
letter		[a-zA-Z]
integer     {digit}+
float       {digit}+"."{digit}+
id			{letter}+({letter}|{digit})*

%option yylineno

%x COMMENT STRING_STATE

/* Rules section */
%%

 /* Arithmetic */
"+"     { CONCAT return ADD; }
"-" 	{ CONCAT return SUB; }
"*" 	{ CONCAT return MUL; }
"/" 	{ CONCAT return DIV; }
"%"     { CONCAT return MOD; }
"++"    { CONCAT return INC; }
"--"    { CONCAT return DEC; }

 /* Relational */
">"		{ CONCAT return MT; }
"<"		{ CONCAT return LT; }
">="	{ CONCAT return MTE; }
"<="	{ CONCAT return LTE; }
"=="	{ CONCAT return EQ; }
"!="	{ CONCAT return NE; }

 /* Assignment */
"="		{ CONCAT return ASGN; }
"+="	{ CONCAT return ADDASGN; }
"-="	{ CONCAT return SUBASGN; }
"*="	{ CONCAT return MULASGN; }
"/="	{ CONCAT return DIVASGN; }
"%="	{ CONCAT return MODASGN; }

 /* Logical */
"&&"	{ CONCAT return AND; }
"||"	{ CONCAT return OR; }
"!"		{ CONCAT return NOT; }

 /* Delimiters */
"("		{ CONCAT return LB; }
")"		{ CONCAT return RB; }
"{"		{ CONCAT return LCB; }
"}"		{ CONCAT printf("%d: %s", yylineno+1, buf); memset(buf, '\0', BUF_SIZE); printRCB = true; return RCB; }
"["		{ CONCAT return LSB; }
"]"		{ CONCAT return RSB; }
","		{ CONCAT return COMMA; }

 /* Print Keywords */	
"print"		{ CONCAT return PRINT; }

 /* Condition and Loop Keywords */
"if"		{ CONCAT return IF; }
"else"		{ CONCAT return ELSE; }
"for"		{ CONCAT return FOR; }
"while"		{ CONCAT return WHILE; }

 /* Declaration Keywords */
"void"		{ CONCAT return VOID; }
"int"		{ CONCAT return INT; }
"float"  	{ CONCAT return FLOAT; }
"string"  	{ CONCAT return STRING; }
"bool"  	{ CONCAT return BOOL; }

 /* boolean Keywords */
"true"      { CONCAT return TRUE; }
"false"     { CONCAT return FALSE; }

"return"    { CONCAT return RET; }

 /* String Constant */
\"				        { CONCAT BEGIN STRING_STATE; }
<STRING_STATE>\"		{ CONCAT BEGIN INITIAL; }
<STRING_STATE>[^"]*		{ CONCAT return STR_CONST; }

 /* Number Constant */
{integer}	{ CONCAT return I_CONST; }
{float}	    { CONCAT return F_CONST; }

 /* C type Comment */
"/*"				{ CONCAT BEGIN COMMENT; }
<COMMENT>[^*\n]+	{ CONCAT }
<COMMENT>\n			{ CONCAT printf("%d: %s", yylineno, buf); memset(buf, '\0', BUF_SIZE);}
<COMMENT>"*"		{ CONCAT }
<COMMENT>"*/"		{ CONCAT BEGIN INITIAL; }

 /* C++ type Comment */
\/\/.*	{ CONCAT }

 /* Variable ID */
 {id}       { CONCAT return ID; }

 /* others */

[;]         { CONCAT return SEMICOLON; }
[\n]        { CONCAT

                if(printRCB)
                {
                    printRCB = false;
                    printf("%s", buf); 
                }
                else
                {
                    printf("%d: %s", yylineno, buf); 
                }
                
                if(errorStatus==1)
                {
                    errorStatus = 0;
                    if(isFunction)
                    {
                        semError(4);
                    }
                    else
                    {
                        semError(3);
                    }
                }
                else if(errorStatus==2)
                {
                    errorStatus = 0;
                    if(isFunction)
                    {
                        if(isArg)
                            semError(1);
                        else
                            semError(2);
                    }
                    else
                        semError(1);
                }
                isFunction = false;
                isArg = false;
                memset(buf, '\0', BUF_SIZE);
                

                if(dumpTheTableRightHereAccordingToTheHomeworkRequirement)
                {
                    dumpTheTableRightHereAccordingToTheHomeworkRequirement = false;
                    dump_symbol(tableScope, true);
                }
                if(forwardDeclarationLine)
                {
                    dump_symbol(tableScope + 1, false);
                }
                forwardDeclarationLine = false;
            }
[ \t]		{ CONCAT } /* Ignore */
[^ \t\n] 	{ CONCAT  } /* Ignore other charactor sets */
<<EOF>>     { return EOF; }

%%

int yywrap()
{
    return 1;
}

void semError(short type)
{
    printf("\n|-----------------------------------------------|\n");
    printf("| Error found in line %d: %s", yylineno, buf);
    if(type==1)
        printf("| %s %s", "Undeclared variable", errID);
    else if(type==2)
        printf("| %s %s", "Undeclared function", errID);
    else if(type==3)
        printf("| %s %s", "Redeclared variable", errID);
    else if(type==4)
        printf("| %s %s", "Redeclared function", errID);
    printf("\n|-----------------------------------------------|\n\n");
}